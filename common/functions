#!/usr/bin/env bash

# Copyright (C) 2018-20 Akhil Narang
# Copyright (C) 2020-21 Omkar Chandorkar
# SPDX-License-Identifier: GPL-3.0-only

function upinfo() {
    echo -ne "${green}$(hostname) ${red}uptime is ${cyan} \\t ";uptime | awk /'up/ {print $3,$4,$5,$6,$7,$8,$9,$10,$11}'
}

function onLogin() {
    # Colors
    green='\e[0;32m'
    cyan='\e[0;36m'
    red='\e[0;31m'
    lightgray='\e[0;37m'

    export GIT_PS1_SHOWDIRTYSTATE=1
    export GIT_PS1_SHOWSTASHSTATE=1
    export GIT_PS1_SHOWUNTRACKEDFILES=1
    export GIT_PS1_SHOWUPSTREAM=auto
    export GIT_PS1_SHOWCOLORHINTS=1
    unset PS1
    #PS1='[\u@\h \W$(__git_ps1 " (%s)")]\$ '
    if [[ -f "${HOME}/git-prompt.sh" ]]; then
        source ~/git-prompt.sh
        PS1='| \h (\w)$(__git_ps1 " {%s}") |-> '
    else
        PS1='| \h (\w) |-> '
    fi
    clear
    HOST=$(hostname)
    if [[ ${#HOST} -lt 14 ]]; then
        echo -e "${lightgray}";figlet -c "$(hostname)"
    fi
    echo ""
    echo -ne "${red}Today is:\\t\\t${cyan} $(date)"
    echo ""
    echo -e "${red}Kernel Information: \\t${cyan} $(uname -smr)"
    echo -ne "${cyan}"
    upinfo
    echo ""
    echo -e "Welcome to $(hostname), $(whoami)!"
    echo -e
    fortune
}

function fastreposync() {
  time schedtool -B -e ionice -n 0 `which repo` sync -c --force-sync --optimized-fetch --no-tags --no-clone-bundle -j$(nproc --all) "$@";
}

function gerrit() {
    if [ ! -d ".git" ]; then
        echo -e "Please run this inside a git directory";
    else
        git remote rm gerrit 2>/dev/null;
        [[ -z "${GERRIT_USER}" ]] && export GERRIT_USER=$(git config --get review.gerrit-ssh.aospa.co.username);
        if [[ -z "${GERRIT_USER}" ]]; then
            git remote add gerrit $(git remote -v | grep -i "github\.com[:\/]AOSPA" | awk '{print $2}' | uniq | sed -e "s|.*github.com[:\/]AOSPA|ssh://gerrit-ssh.aospa.co:29418/AOSPA|");
        else
            git remote add gerrit $(git remote -v | grep -i "github\.com[:\/]AOSPA" | awk '{print $2}' | uniq | sed -e "s|.*github.com[:\/]AOSPA|ssh://${GERRIT_USER}@gerrit-ssh.aospa.co:29418/AOSPA|");
        fi
    fi
}

function lmogerrit() {
    if [ ! -d ".git" ]; then
        echo -e "Please run this inside a git directory";
    else
        git remote rm gerrit 2>/dev/null;
        [[ -z "${GERRIT_USER}" ]] && export GERRIT_USER=$(git config --get review.gerrit-ssh.aospa.co.username);
        if [[ -z "${GERRIT_USER}" ]]; then
            git remote add gerrit $(git remote -v | grep -i "git\.libremobileos\.com[:\/]LMODroid" | awk '{print $2}' | uniq | sed -e "s|.*git.libremobileos.com[:\/]LMODroid|ssh://gerrit.libremobileos.com:29418/LMODroid|");
        else
            git remote add gerrit $(git remote -v | grep -i "git\.libremobileos\.com[:\/]LMODroid" | awk '{print $2}' | uniq | sed -e "s|.*git.libremobileos.com[:\/]LMODroid|ssh://${GERRIT_USER}@gerrit.libremobileos.com:29418/LMODroid|");
        fi
    fi
}

function set_ccache () {
  ccache_path=$(which ccache)
  export USE_CCACHE=1
  export USE_THINLTO_CACHE=1
  export CCACHE_EXEC="$ccache_path"
  export CCACHE_DIR=/home/$USER/.cache/ccache
  $ccache_path -M 20G
  $ccache_path -o compression=true
}

function ccache_for_release () {
  ccache_path=$(which ccache)
  export USE_CCACHE=1
  export USE_THINLTO_CACHE=1
  export CCACHE_EXEC="$ccache_path"
  export CCACHE_DIR=/home/$USER/.cache/release-ccache
  $ccache_path -M 50G
  $ccache_path -o compression=true
}

function msg() {
  echo -e "\e[1;32m$1\e[0m"
}

function helptree() {
  if [[ -z $1 && -z $2 ]]; then
    msg "Usage: helptree <tag> <add/pull>"
    return
  fi
  kernel_version="$( cat Makefile | grep VERSION | head -n 1 | sed "s|.*=||1" | sed "s| ||g" )"
  kernel_patchlevel="$( cat Makefile | grep PATCHLEVEL | head -n 1 | sed "s|.*=||1" | sed "s| ||g" )"
  version=$kernel_version.$kernel_patchlevel
  if [[ $version != "4.14" && $version != "4.19" &&$version != "5.4" ]]; then
    msg "Kernel $version not supported! Only msm-4.14 - msm-5.4 are supported as of now."
    return
  fi
  if [[ -z $3 ]]; then
    spec=all
  else
    spec=$3
  fi
  if [[ $2 = "add" ]]; then
    tree_status="Adding"
    commit_status="Import from"
  else
    tree_status="Updating"
    commit_status="Merge"
    if [[ $spec = "all" ]]; then
      msg "Merging kernel as of $1.."
      git fetch https://git.codelinaro.org/clo/la/kernel/msm-$version $1 &&
      git merge FETCH_HEAD -m "Merge tag '$1' of msm-$version"
    fi
  fi
  if [[ $spec = "wifi" || $spec = "all" ]]; then
    for i in qcacld-3.0 qca-wifi-host-cmn fw-api; do
      msg "$tree_status $i subtree as of $1..."
      git subtree $2 -P drivers/staging/$i -m "$i: $commit_status tag '$1'" \
        https://git.codelinaro.org/clo/la/platform/vendor/qcom-opensource/wlan/$i $1
    done
  fi
  if [[ $spec = "techpack" || $spec = "all" ]]; then
    msg "$tree_status audio-kernel subtree as of $1..."
    git subtree $2 -P techpack/audio -m "techpack: audio: $commit_status tag '$1'" \
      https://git.codelinaro.org/clo/la/platform/vendor/opensource/audio-kernel $1
    if [[ $version = "5.4" ]]; then
      msg "$tree_status dataipa subtree as of $1..."
      git subtree $2 -P techpack/dataipa -m "techpack: dataipa: $commit_status tag '$1'" \
        https://git.codelinaro.org/clo/la/platform/vendor/opensource/dataipa $1
      msg "$tree_status datarmnet subtree as of $1..."
      git subtree $2 -P techpack/datarmnet -m "techpack: datarmnet: $commit_status tag '$1'" \
        https://git.codelinaro.org/clo/la/platform/vendor/qcom/opensource/datarmnet $1
      msg "$tree_status datarmnet-ext subtree as of $1..."
      git subtree $2 -P techpack/datarmnet-ext -m "techpack: datarmnet-ext: $commit_status tag '$1'" \
        https://git.codelinaro.org/clo/la/platform/vendor/qcom/opensource/datarmnet-ext $1
      msg "$tree_status camera-kernel subtree as of $1..."
      git subtree $2 -P techpack/camera -m "techpack: camera: $commit_status tag '$1'" \
        https://git.codelinaro.org/clo/la/platform/vendor/opensource/camera-kernel $1
      msg "$tree_status display-drivers subtree as of $1..."
      git subtree $2 -P techpack/display -m "techpack: display: $commit_status tag '$1'" \
        https://git.codelinaro.org/clo/la/platform/vendor/opensource/display-drivers $1
      msg "$tree_status video-driver subtree as of $1..."
      git subtree $2 -P techpack/video -m "techpack: video: $commit_status tag '$1'" \
        https://git.codelinaro.org/clo/la/platform/vendor/opensource/video-driver $1
    fi
  fi
}

function addtree() {
  if [[ -z $1 ]]; then
    msg "Usage: addtree <tag> [optional: spec]"
    return
  fi
  helptree $1 add $2
}

function updatetree() {
  if [[ -z $1 ]]; then
    msg "Usage: updatetree <tag> [optional: spec]"
    return
  fi
  helptree $1 pull $2
}

function pdup() {
    [ -z "$PD_API_KEY" ] && echo "Error: API Key not specified!" && return
    [ -z "$1" ] && echo "Error: File not specified!" && return
    ID=$(curl --progress-bar -T "$1" -u :$PD_API_KEY https://pixeldrain.com/api/file/ | cat | grep -Po '(?<="id":")[^"]*')
    echo -e "\nhttps://pixeldrain.com/u/$ID"
}
